set(IS_WINDOWS false)
set(IS_LINUX false)
set(IS_APPLE false)

if (WIN32)
    set(IS_WINDOWS true)
elseif(APPLE)
    set(IS_APPLE true)
elseif(UNIX)
    set(IS_LINUX true)
else()
    message(FATAL_ERROR "Invalid platform. WIN32 or UNIX or APPLE should be true")
endif()

# To use in code (with #if)
add_definitions(-DIS_WINDOWS=${IS_WINDOWS})
add_definitions(-DIS_LINUX=${IS_LINUX})
add_definitions(-DIS_APPLE=${IS_APPLE})

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(RELEASE_OR_DEBUG "debug")
    set(RELWITHDEBINFO_OR_DEBUG "Debug")
    set(IS_DEBUG_MODE true)
    set(IS_RELEASE_MODE false)
elseif (CMAKE_BUILD_TYPE STREQUAL "Release")
    set(RELEASE_OR_DEBUG "release")
    set(RELWITHDEBINFO_OR_DEBUG "RelWithDebInfo")
    set(IS_DEBUG_MODE false)
    set(IS_RELEASE_MODE true)
else()
    message(FATAL_ERROR "Invalid BUILD_MODE value, should be Debug or Release")
endif()

if (IS_WINDOWS)
    include(${CMAKE_SCRIPT_DIR}/definitions.windows.cmake)
endif()

if (IS_LINUX)
    set(CONFIGURATION_NAME "linux-${RELEASE_OR_DEBUG}")
elseif (IS_APPLE)
    set(CONFIGURATION_NAME "apple-${RELEASE_OR_DEBUG}")
elseif (IS_WINDOWS)
    set(CONFIGURATION_NAME "${win32win64}-${RELEASE_OR_DEBUG}")
else()
    message(FATAL_ERROR "Failed to find CONFIGURATION_NAME")
endif()


